// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// extreme_deconvolution_rcpp
Rcpp::List extreme_deconvolution_rcpp(RcppGSL::matrix<double>& ydata, RcppGSL::vector<double>& ycovar, RcppGSL::vector<double>& projection, RcppGSL::vector<double>& logweights, RcppGSL::vector<double>& amp, RcppGSL::matrix<double>& xmean, RcppGSL::vector<double>& xcovar, RcppGSL::vector<int>& fixamp_int, RcppGSL::vector<int>& fixmean_int, RcppGSL::vector<int>& fixcovar_int, double tol, int maxiter, int likeonly, double w, RcppGSL::vector<int>& logfilename, int splitnmerge, RcppGSL::vector<int>& convlogfilename, bool noproj, bool diagerrs, bool noweight);
RcppExport SEXP _mashr_extreme_deconvolution_rcpp(SEXP ydataSEXP, SEXP ycovarSEXP, SEXP projectionSEXP, SEXP logweightsSEXP, SEXP ampSEXP, SEXP xmeanSEXP, SEXP xcovarSEXP, SEXP fixamp_intSEXP, SEXP fixmean_intSEXP, SEXP fixcovar_intSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP likeonlySEXP, SEXP wSEXP, SEXP logfilenameSEXP, SEXP splitnmergeSEXP, SEXP convlogfilenameSEXP, SEXP noprojSEXP, SEXP diagerrsSEXP, SEXP noweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppGSL::matrix<double>& >::type ydata(ydataSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<double>& >::type ycovar(ycovarSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<double>& >::type projection(projectionSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<double>& >::type logweights(logweightsSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<double>& >::type amp(ampSEXP);
    Rcpp::traits::input_parameter< RcppGSL::matrix<double>& >::type xmean(xmeanSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<double>& >::type xcovar(xcovarSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<int>& >::type fixamp_int(fixamp_intSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<int>& >::type fixmean_int(fixmean_intSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<int>& >::type fixcovar_int(fixcovar_intSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type likeonly(likeonlySEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<int>& >::type logfilename(logfilenameSEXP);
    Rcpp::traits::input_parameter< int >::type splitnmerge(splitnmergeSEXP);
    Rcpp::traits::input_parameter< RcppGSL::vector<int>& >::type convlogfilename(convlogfilenameSEXP);
    Rcpp::traits::input_parameter< bool >::type noproj(noprojSEXP);
    Rcpp::traits::input_parameter< bool >::type diagerrs(diagerrsSEXP);
    Rcpp::traits::input_parameter< bool >::type noweight(noweightSEXP);
    rcpp_result_gen = Rcpp::wrap(extreme_deconvolution_rcpp(ydata, ycovar, projection, logweights, amp, xmean, xcovar, fixamp_int, fixmean_int, fixcovar_int, tol, maxiter, likeonly, w, logfilename, splitnmerge, convlogfilename, noproj, diagerrs, noweight));
    return rcpp_result_gen;
END_RCPP
}
// calc_rooti_rcpp
Rcpp::List calc_rooti_rcpp(Rcpp::NumericMatrix x_mat);
RcppExport SEXP _mashr_calc_rooti_rcpp(SEXP x_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x_mat(x_matSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_rooti_rcpp(x_mat));
    return rcpp_result_gen;
END_RCPP
}
// calc_lik_rcpp
Rcpp::List calc_lik_rcpp(Rcpp::NumericMatrix b_mat, Rcpp::NumericMatrix s_mat, Rcpp::NumericMatrix v_mat, Rcpp::NumericMatrix l_mat, Rcpp::NumericVector U_3d, bool logd, bool common_cov);
RcppExport SEXP _mashr_calc_lik_rcpp(SEXP b_matSEXP, SEXP s_matSEXP, SEXP v_matSEXP, SEXP l_matSEXP, SEXP U_3dSEXP, SEXP logdSEXP, SEXP common_covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_mat(b_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type s_mat(s_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type v_mat(v_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type l_mat(l_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type U_3d(U_3dSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< bool >::type common_cov(common_covSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_lik_rcpp(b_mat, s_mat, v_mat, l_mat, U_3d, logd, common_cov));
    return rcpp_result_gen;
END_RCPP
}
// calc_lik_rooti_rcpp
Rcpp::List calc_lik_rooti_rcpp(Rcpp::NumericMatrix b_mat, Rcpp::NumericVector rooti_3d, bool logd, bool common_cov);
RcppExport SEXP _mashr_calc_lik_rooti_rcpp(SEXP b_matSEXP, SEXP rooti_3dSEXP, SEXP logdSEXP, SEXP common_covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_mat(b_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rooti_3d(rooti_3dSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< bool >::type common_cov(common_covSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_lik_rooti_rcpp(b_mat, rooti_3d, logd, common_cov));
    return rcpp_result_gen;
END_RCPP
}
// calc_post_rcpp
Rcpp::List calc_post_rcpp(Rcpp::NumericMatrix b_mat, Rcpp::NumericMatrix s_mat, Rcpp::NumericMatrix s_alpha_mat, Rcpp::NumericMatrix s_orig_mat, Rcpp::NumericMatrix v_mat, Rcpp::NumericMatrix l_mat, Rcpp::NumericMatrix a_mat, Rcpp::NumericVector U_3d, Rcpp::NumericMatrix posterior_weights, bool common_cov, int report_type);
RcppExport SEXP _mashr_calc_post_rcpp(SEXP b_matSEXP, SEXP s_matSEXP, SEXP s_alpha_matSEXP, SEXP s_orig_matSEXP, SEXP v_matSEXP, SEXP l_matSEXP, SEXP a_matSEXP, SEXP U_3dSEXP, SEXP posterior_weightsSEXP, SEXP common_covSEXP, SEXP report_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_mat(b_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type s_mat(s_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type s_alpha_mat(s_alpha_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type s_orig_mat(s_orig_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type v_mat(v_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type l_mat(l_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a_mat(a_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type U_3d(U_3dSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type posterior_weights(posterior_weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type common_cov(common_covSEXP);
    Rcpp::traits::input_parameter< int >::type report_type(report_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_post_rcpp(b_mat, s_mat, s_alpha_mat, s_orig_mat, v_mat, l_mat, a_mat, U_3d, posterior_weights, common_cov, report_type));
    return rcpp_result_gen;
END_RCPP
}
// calc_post_precision_rcpp
Rcpp::List calc_post_precision_rcpp(Rcpp::NumericMatrix b_mat, Rcpp::NumericMatrix s_mat, Rcpp::NumericMatrix s_alpha_mat, Rcpp::NumericMatrix s_orig_mat, Rcpp::NumericMatrix v_mat, Rcpp::NumericMatrix l_mat, Rcpp::NumericMatrix a_mat, Rcpp::NumericVector vinv_3d, Rcpp::NumericVector U0_3d, Rcpp::NumericMatrix posterior_weights, bool common_cov, int report_type);
RcppExport SEXP _mashr_calc_post_precision_rcpp(SEXP b_matSEXP, SEXP s_matSEXP, SEXP s_alpha_matSEXP, SEXP s_orig_matSEXP, SEXP v_matSEXP, SEXP l_matSEXP, SEXP a_matSEXP, SEXP vinv_3dSEXP, SEXP U0_3dSEXP, SEXP posterior_weightsSEXP, SEXP common_covSEXP, SEXP report_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b_mat(b_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type s_mat(s_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type s_alpha_mat(s_alpha_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type s_orig_mat(s_orig_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type v_mat(v_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type l_mat(l_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a_mat(a_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type vinv_3d(vinv_3dSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type U0_3d(U0_3dSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type posterior_weights(posterior_weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type common_cov(common_covSEXP);
    Rcpp::traits::input_parameter< int >::type report_type(report_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_post_precision_rcpp(b_mat, s_mat, s_alpha_mat, s_orig_mat, v_mat, l_mat, a_mat, vinv_3d, U0_3d, posterior_weights, common_cov, report_type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mashr_extreme_deconvolution_rcpp", (DL_FUNC) &_mashr_extreme_deconvolution_rcpp, 20},
    {"_mashr_calc_rooti_rcpp", (DL_FUNC) &_mashr_calc_rooti_rcpp, 1},
    {"_mashr_calc_lik_rcpp", (DL_FUNC) &_mashr_calc_lik_rcpp, 7},
    {"_mashr_calc_lik_rooti_rcpp", (DL_FUNC) &_mashr_calc_lik_rooti_rcpp, 4},
    {"_mashr_calc_post_rcpp", (DL_FUNC) &_mashr_calc_post_rcpp, 11},
    {"_mashr_calc_post_precision_rcpp", (DL_FUNC) &_mashr_calc_post_precision_rcpp, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_mashr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
